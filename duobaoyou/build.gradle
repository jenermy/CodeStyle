apply plugin: 'com.android.application'

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile project(':SlideSwitch')
    compile project(':ViewPagerIndicator_library')
    compile project(':PullToRefresh')
    compile project(':pickerviews')
    compile files('libs/sun.misc.BASE64Decoder.jar')
}

android {

    compileSdkVersion 23
    buildToolsVersion '26.0.2'
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
//            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    defaultConfig{
//        versionName "1.2.5"
        applicationId "com.showsoft.duobaoyou"
//        multiDexEnabled true
        ndk {
            abiFilters"armeabi","armeabi-v7a","x86","mips"
           // abiFilters "armeabi", "armeabi-v7a", "arm64-v8a","x86", "x86_64", "mips", "mips64"
        }
    }
//    productFlavors{
//        wandoujia{
////            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
//        }
//        xiaomi{
//
//        }
//        yingyongbao{
//
//        }
//        huawei{
//
//        }
//    }
//    productFlavors.all{flavor->
//        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }
//    applicationVariants.all{variant->
//        variant.outputs.each {output->
//            def outputFile = output.outputFile
//            if(outputFile != null && outputFile.name.endsWith(".apk")){
//                def fileName = outputFile.name.replace(".apk","-${defaultConfig.versionName}.apk")
//                output.outputFile = new File(outputFile.parent,fileName)
//            }
//        }
//    }
    buildTypes{
        debug{
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-project.txt'
        }
        release{
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-project.txt'
        }
    }
}
